import random
import nltk
from nltk.tokenize import word_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from nltk.sentiment import SentimentIntensityAnalyzer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
from nltk.corpus import wordnet
from Levenshtein import ratio

nltk.download('punkt')
nltk.download('vader_lexicon')
nltk.download('wordnet')
sia = SentimentIntensityAnalyzer()

def analyze_sentiment(text):
    scores = sia.polarity_scores(text)
    if scores['compound'] >= 0.5:
        return "positive"
    elif scores['compound'] <= -0.5:
        return "negative"
    else:
        return "neutral"

# Function to find synonyms using WordNet
def get_synonyms(word):
    synonyms = set()
    for syn in wordnet.synsets(word):
        for lemma in syn.lemmas():
            synonyms.add(lemma.name().lower())
    return synonyms

# Function to clean and preprocess text
def clean_text(text):
    words = word_tokenize(text.lower())  
    return " ".join(words)


training_data = [
    # Greetings
    ("hello", "greeting"), ("hi", "greeting"), ("hey", "greeting"),
    ("good morning", "greeting"), ("good evening", "greeting"),
    ("how are you?", "greeting"), ("whatâ€™s up?", "greeting"), ("yo", "greeting"),
    ("howâ€™s life?", "greeting"), ("hope you're doing well", "greeting"),

    # Farewell
    ("bye", "goodbye"), ("see you later", "goodbye"), ("goodbye", "goodbye"),
    ("take care", "goodbye"), ("catch you later", "goodbye"),
    ("I have to go", "goodbye"), ("see you around", "goodbye"),

    # Gratitude
    ("thank you", "gratitude"), ("thanks a lot", "gratitude"),
    ("thanks", "gratitude"), ("I appreciate it", "gratitude"),
    ("many thanks", "gratitude"), ("thanks so much", "gratitude"),

    # Asking for name
    ("what is your name?", "name"),("name","name"),("who are you?", "name"),
    ("tell me your name", "name"), ("do you have a name?", "name"),
    ("what should I call you?", "name"),

    # Weather
    ("whatâ€™s the weather like?", "weather"),("weather","weather"),("howâ€™s the weather today?", "weather"),
    ("will it rain today?", "weather"), ("is it hot outside?", "weather"),
    ("whatâ€™s the forecast?", "weather"), ("should I take an umbrella?", "weather"),

    # Small talk
    ("what are you doing?", "small_talk"), ("tell me something interesting", "small_talk"),
    ("howâ€™s your day?", "small_talk"), ("do you like chatting?", "small_talk"),
    ("do you get bored?", "small_talk"), ("what do you do all day?", "small_talk"),
    
    #developer Details
    ("Who Developed you?","Developer"),("Who is your developer","Developer"),("developer","Developer"),

    # Emotions
    ("Im sad", "emotion"),("Im Feeling alone","emotion") , ("I feel happy", "emotion"),
    ("Iâ€™m angry", "emotion"), ("I am excited", "emotion"),
    ("I'm feeling down", "emotion"), ("I'm really frustrated", "emotion"),

    # Fun facts
    ("tell me a fact", "fact"), ("fact","fact"),("give me a random fact", "fact"),
    ("I want to learn something new", "fact"), ("surprise me with a fact", "fact"),

    # Jokes
    ("tell me a joke", "joke"),("joke","joke"),("make me laugh", "joke"),
    ("say something funny", "joke"), ("got any jokes?", "joke"),

    # Help
    ("I need help", "help"), ("help","help"),("can you assist me?", "help"),
    ("help me", "help"), ("Iâ€™m stuck", "help"), ("can you guide me?", "help")
]
responses = {
    "greeting": [
        "Hello!", "Hi there!", "Hey! How can I help you?", "Hi, whatâ€™s up?",
        "Good to see you!", "Hey, nice to chat with you!", "Howâ€™s your day going?"
    ],
    "goodbye": [
        "Goodbye!", "See you later!", "Take care!", "Bye, have a great day!",
        "Catch you later!", "Stay safe!", "See you around!"
    ],
    "gratitude": [
        "You're welcome!", "No problem!", "Glad to help!", "Happy to assist!",
        "Anytime!", "No worries!", "Always here for you!"
    ],
    "name": [
        "I am a chatbot!", "You can call me ChatBot.", "I'm just a friendly AI!",
        "I go by many names, but you can call me ChatBot!", "Iâ€™m your virtual assistant!"
    ],
    "weather": [
        "I'm not sure, but you can check a weather app!", "It depends on where you are!",
        "Maybe it!'s sunny!", "Check your local forecast for accuracy!",
        "I wish I could step outside to check!"
    ],
    "Developer":["Ms.Sabura Shifana Jamal Developed me!!","My Developer is MS.Sabura Shifana Jamal"],
    "small_talk": [
        "I'm just here chatting with you!", "Not much, just helping people!",
        "Just thinking about AI!", "Hanging out in the digital world!",
        "Waiting for interesting questions!"
    ],
    
     "emotion_positive": ["That's great to hear! ðŸ˜Š", "I'm glad you're happy!"],
    "emotion_negative": ["I'm here for you. Want to talk about it? ðŸ˜”", "I hope things get better soon!"],
    "emotion_neutral": ["I see. Tell me more!", "What happened","Want to talk about it?"],
    "fact": [
        "Did you know honey never spoils?", "A day on Venus is longer than a year on Venus!",
        "Bananas are berries!", "Octopuses have three hearts!", "Cows have best friends!"
    ],
    "joke": [
        "Why don't skeletons fight? They don't have the guts!", 
        "I told my suitcase I wouldn't need it anymore... now I'm emotionally baggage-free!", 
        "Why did the scarecrow win an award? He was outstanding in his field!",
        "Parallel lines have so much in common. Itâ€™s a shame theyâ€™ll never meet!"
    ],
    "help": [
        "Tell me what you need help with!", "I'm here to assist you.", 
        "What do you need help with exactly?", "Iâ€™ll try my best to guide you!",
        "Ask me anything, Iâ€™ll do my best!"
    ],
   "fallback": [
    "I'm not sure how to respond. Can you rephrase?",
    "Hmm, Iâ€™m not sure what you mean. Can you clarify?",
    "Iâ€™m still learning! Could you explain differently?",
    "That's an interesting thought! Can you expand on it?",
    "I'm not perfect, but I'm trying! Let's talk more about it."
]

}
last_response = None

def clean_text(text):
    words = word_tokenize(text.lower())
    return " ".join(words)

X_train = [clean_text(item[0]) for item in training_data]
y_train = [item[1] for item in training_data]

vectorizer = TfidfVectorizer()
X_train_tfidf = vectorizer.fit_transform(X_train)

classifier = LogisticRegression()
classifier.fit(X_train_tfidf, y_train)

from fuzzywuzzy import process

def find_best_match(user_input):
    phrases = [phrase for phrase, tag in training_data]
    best_match, score = process.extractOne(user_input, phrases)
    
    if score > 70:  # Adjust the threshold based on testing
        for phrase, tag in training_data:
            if phrase == best_match:
                return tag  # Return the category
    return None



def chatbot_response(user_input):
    global last_response
    user_input_clean = clean_text(user_input)
    sentiment = analyze_sentiment(user_input)
    user_input_tfidf = vectorizer.transform([clean_text(user_input)])
    predicted_tag = classifier.predict(user_input_tfidf)[0]
    confidence = cosine_similarity(user_input_tfidf, X_train_tfidf).max()
    
    if confidence < 0.3:
        best_match = find_best_match(user_input_clean)
        if best_match:
            return f"Did you mean something about {best_match}?"
        return random.choice(responses["fallback"])

    # Handling emotion-based responses
    if predicted_tag == "emotion":
        if sentiment == "positive":
            possible_responses = responses["emotion_positive"]
        elif sentiment == "negative":
            possible_responses = responses["emotion_negative"]
        else:
            possible_responses = responses["emotion_neutral"]
    else:
        possible_responses = responses.get(predicted_tag, responses["fallback"])

    response = random.choice(possible_responses)

    # Prevent repeating the same response consecutively
    while response == last_response and len(possible_responses) > 1:
        response = random.choice(possible_responses)

    last_response = response
    return response


# Chat loop
while True:
    user_input = input("You: ")
    if user_input.lower() in ["exit", "quit", "bye"]:
        print("Chatbot: Goodbye!")
        break
    response = chatbot_response(user_input)
    print("Chatbot:", response)
